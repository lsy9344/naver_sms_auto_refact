name: terraform-check

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
      - '.github/workflows/terraform-check.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ap-northeast-2
      TF_IN_AUTOMATION: "true"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.53.0

      - name: Ensure AWS credentials are configured
        run: |
          if [ -z "${AWS_ACCESS_KEY_ID}" ] || [ -z "${AWS_SECRET_ACCESS_KEY}" ]; then
            echo "::error::Missing AWS credentials for Terraform plan. Configure TERRAFORM_AWS_ACCESS_KEY_ID and TERRAFORM_AWS_SECRET_ACCESS_KEY repository secrets."
            exit 1
          fi

      - name: terraform fmt (check)
        run: terraform -chdir=infrastructure/terraform fmt -check -recursive

      - name: Create backend override for CI
        run: |
          cat > infrastructure/terraform/backend_override.tf <<EOF
          terraform {
            backend "local" {}
          }
          EOF

      - name: terraform init (local backend)
        run: terraform -chdir=infrastructure/terraform init -input=false

      - name: terraform validate
        run: terraform -chdir=infrastructure/terraform validate

      - name: tflint init
        working-directory: infrastructure/terraform
        run: tflint --init --config=../.tflint.hcl

      - name: tflint
        working-directory: infrastructure/terraform
        run: tflint --config=../.tflint.hcl --minimum-failure-severity=error

      - name: terraform plan (sandbox)
        run: terraform -chdir=infrastructure/terraform plan -var-file=environments/sandbox.tfvars -out=tfplan-sandbox.bin

      - name: Render plan to text
        run: terraform -chdir=infrastructure/terraform show -no-color tfplan-sandbox.bin > infrastructure/terraform/tfplan-sandbox.txt

      - name: Comment plan summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'infrastructure/terraform/tfplan-sandbox.txt';
            const content = fs.readFileSync(path, 'utf8');
            const maxLength = 6000;
            const truncated = content.length > maxLength
              ? content.slice(0, maxLength) + '\n...\n(plan output truncated)'
              : content;
            const body = '### Terraform plan (sandbox)\n```\n' + truncated + '\n```';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-sandbox
          path: |
            infrastructure/terraform/tfplan-sandbox.bin
            infrastructure/terraform/tfplan-sandbox.txt
          retention-days: 7

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  notify:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [validate]
    if: always()
    steps:
      - name: Determine validation status
        id: status
        run: |
          if [ "${{ needs.validate.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "message=Terraform validation passed" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "message=Terraform validation failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "title": "${{ steps.status.outputs.emoji }} ${{ steps.status.outputs.message }}",
                  "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "fields": [
                    {
                      "title": "Workflow",
                      "value": "${{ github.workflow }}",
                      "short": true
                    },
                    {
                      "title": "Validation Result",
                      "value": "${{ needs.validate.result }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Author",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }} | ${{ github.sha }}>",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    }
                  ],
                  "footer": "GitHub Actions - Terraform Check",
                  "ts": "$(date +%s)"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SMS Automation Rules Schema",
  "description": "JSON Schema for validating rules.yaml configuration",
  "version": "1.0",
  "type": "object",
  "required": [
    "rules"
  ],
  "properties": {
    "rules": {
      "type": "array",
      "description": "Array of rule definitions",
      "items": {
        "$ref": "#/definitions/rule"
      }
    }
  },
  "definitions": {
    "rule": {
      "type": "object",
      "description": "Individual rule definition",
      "required": [
        "name",
        "enabled",
        "conditions",
        "actions"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the rule",
          "minLength": 1,
          "maxLength": 255
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether rule is active"
        },
        "description": {
          "type": "string",
          "description": "Human-readable rule description",
          "maxLength": 500
        },
        "tags": {
          "type": "array",
          "description": "Tags for categorizing rules",
          "items": {
            "type": "string"
          },
          "examples": [
            "core",
            "future",
            "confirmation",
            "reminder"
          ]
        },
        "priority": {
          "type": "string",
          "description": "Rule execution priority",
          "enum": [
            "high",
            "medium",
            "low"
          ]
        },
        "notes": {
          "type": "string",
          "description": "Additional implementation notes",
          "maxLength": 500
        },
        "conditions": {
          "type": "array",
          "description": "Array of conditions (AND logic)",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/condition"
          }
        },
        "actions": {
          "type": "array",
          "description": "Array of actions to execute",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/action"
          }
        }
      },
      "additionalProperties": false
    },
    "condition": {
      "type": "object",
      "description": "Individual condition definition",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Condition type identifier",
          "enum": [
            "booking_not_in_db",
            "booking_in_db",
            "time_before_booking",
            "flag_not_set",
            "current_hour",
            "booking_status",
            "has_option_keyword",
            "has_multiple_options",
            "store_id_matches",
            "date_range",
            "has_pro_edit_option"
          ]
        },
        "params": {
          "type": "object",
          "description": "Condition-specific parameters"
        }
      },
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "booking_not_in_db"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "booking_in_db"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "time_before_booking"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "hours"
                ],
                "properties": {
                  "hours": {
                    "type": "integer",
                    "description": "Hours before booking",
                    "minimum": 0,
                    "maximum": 168
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "flag_not_set"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "flag"
                ],
                "properties": {
                  "flag": {
                    "type": "string",
                    "description": "Flag name in DynamoDB record",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "current_hour"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "hour"
                ],
                "properties": {
                  "hour": {
                    "type": "integer",
                    "description": "Hour of day (0-23)",
                    "minimum": 0,
                    "maximum": 23
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "booking_status"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "Expected booking status",
                    "enum": [
                      "confirmed",
                      "pending",
                      "cancelled"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "has_option_keyword"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "keywords"
                ],
                "properties": {
                  "keywords": {
                    "type": "array",
                    "description": "Keywords to match against options",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "has_multiple_options"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "keywords",
                  "min_count"
                ],
                "properties": {
                  "keywords": {
                    "type": "array",
                    "description": "Keywords to match against option keywords",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "min_count": {
                    "type": "integer",
                    "description": "Minimum number of keywords to match",
                    "minimum": 1,
                    "maximum": 100
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "store_id_matches"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "store_ids"
                ],
                "properties": {
                  "store_ids": {
                    "type": "array",
                    "description": "Store IDs to match",
                    "items": {
                      "type": "integer"
                    },
                    "minItems": 1
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "date_range"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "start_date",
                  "end_date"
                ],
                "properties": {
                  "start_date": {
                    "type": "string",
                    "description": "Start date (YYYY-MM-DD)",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
                  },
                  "end_date": {
                    "type": "string",
                    "description": "End date (YYYY-MM-DD)",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      ]
    },
    "action": {
      "type": "object",
      "description": "Individual action definition",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Action type identifier",
          "enum": [
            "send_sms",
            "create_db_record",
            "update_flag",
            "send_telegram",
            "send_slack",
            "log_event"
          ]
        },
        "params": {
          "type": "object",
          "description": "Action-specific parameters"
        }
      },
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "send_sms"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "template"
                ],
                "properties": {
                  "template": {
                    "type": "string",
                    "description": "SMS template name",
                    "enum": [
                      "confirmation",
                      "guide",
                      "event",
                      "custom_promotion"
                    ]
                  },
                  "store_specific": {
                    "type": "boolean",
                    "description": "Whether to use store-specific message variants"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "create_db_record"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "update_flag"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "flag",
                  "value"
                ],
                "properties": {
                  "flag": {
                    "type": "string",
                    "description": "Flag name to update in DynamoDB",
                    "minLength": 1
                  },
                  "value": {
                    "type": "boolean",
                    "description": "Flag value"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "send_telegram"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "message"
                ],
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Message to send",
                    "minLength": 1,
                    "maxLength": 4096
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "send_slack"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Slack channel",
                    "pattern": "^#"
                  },
                  "message": {
                    "type": "string",
                    "description": "Static message to send",
                    "minLength": 1
                  },
                  "template_name": {
                    "type": "string",
                    "description": "Slack template name from config/slack_templates.yaml",
                    "minLength": 1
                  },
                  "template_params": {
                    "type": "object",
                    "description": "Template variables for Jinja2 substitution"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "log_event"
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "object",
                "required": [
                  "event_type"
                ],
                "properties": {
                  "event_type": {
                    "type": "string",
                    "description": "Event type to log",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      ]
    }
  }
}
